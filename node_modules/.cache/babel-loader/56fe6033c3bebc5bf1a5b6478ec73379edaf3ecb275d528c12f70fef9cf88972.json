{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2_front\\\\project2\\\\src\\\\fileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploadAndResult = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null); // 사용자가 선택한 이미지\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(''); // 서버에서 반환된 이미지 경로\n  const [analysisText, setAnalysisText] = useState(''); // 서버에서 반환된 분석 텍스트\n  const [analyzedImageUrl, setAnalyzedImageUrl] = useState(''); // 서버에서 반환된 분석된 이미지 URL\n\n  const token = sessionStorage.getItem(\"authToken\");\n  // 이미지 선택 핸들러\n  const handleImageChange = e => {\n    setSelectedImage(e.target.files[0]);\n  };\n\n  // 이미지 업로드 핸들러\n  // 파일 업로드 처리 함수\n  const handleUpload = async () => {\n    if (!selectedImage) {\n      alert('No image selected.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('files', selectedImage); // 서버가 처리할 수 있는 형태로 변경 필요\n\n    try {\n      const response = await fetch('http://192.168.0.142:8080/images/imagesFolder', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}` // 토큰을 Authorization 헤더에 추가\n          // 'Content-Type': 'multipart/form-data' // FormData를 사용할 때 Content-Type은 자동으로 설정되므로 일반적으로 필요 없음\n        },\n        body: formData\n      });\n      if (response.ok) {\n        alert('Image uploaded and analyzed successfully!');\n      } else {\n        alert('Failed to upload and analyze the image.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred during the file upload.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Image and View Analysis Result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload and Analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Image Preview:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedImage,\n        alt: \"Preview\",\n        style: {\n          maxWidth: '100%',\n          maxHeight: '400px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this);\n};\n_s(ImageUploadAndResult, \"IlCBrMlr3fcJuNPba+nQ/4MAb8g=\");\n_c = ImageUploadAndResult;\nexport default ImageUploadAndResult;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadAndResult\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUploadAndResult","_s","selectedImage","setSelectedImage","uploadedImageUrl","setUploadedImageUrl","analysisText","setAnalysisText","analyzedImageUrl","setAnalyzedImageUrl","token","sessionStorage","getItem","handleImageChange","e","target","files","handleUpload","alert","formData","FormData","append","response","fetch","method","headers","body","ok","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","src","alt","style","maxWidth","maxHeight","_c","$RefreshReg$"],"sources":["C:/project2_front/project2/src/fileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst ImageUploadAndResult = () => {\n  const [selectedImage, setSelectedImage] = useState(null); // 사용자가 선택한 이미지\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(''); // 서버에서 반환된 이미지 경로\n  const [analysisText, setAnalysisText] = useState(''); // 서버에서 반환된 분석 텍스트\n  const [analyzedImageUrl, setAnalyzedImageUrl] = useState(''); // 서버에서 반환된 분석된 이미지 URL\n\n  const token = sessionStorage.getItem(\"authToken\")\n  // 이미지 선택 핸들러\n  const handleImageChange = (e) => {\n    setSelectedImage(e.target.files[0]);\n  };\n\n  // 이미지 업로드 핸들러\n  // 파일 업로드 처리 함수\n  const handleUpload = async () => {\n    if (!selectedImage) {\n        alert('No image selected.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('files', selectedImage); // 서버가 처리할 수 있는 형태로 변경 필요\n\n    try {\n        const response = await fetch('http://192.168.0.142:8080/images/imagesFolder', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${token}`, // 토큰을 Authorization 헤더에 추가\n              // 'Content-Type': 'multipart/form-data' // FormData를 사용할 때 Content-Type은 자동으로 설정되므로 일반적으로 필요 없음\n          },\n            body: formData,\n        });\n\n        if (response.ok) {\n            alert('Image uploaded and analyzed successfully!');\n        } else {\n            alert('Failed to upload and analyze the image.');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        alert('An error occurred during the file upload.');\n    }\n};\n\n\n  \nreturn (\n  <div>\n      <h1>Upload Image and View Analysis Result</h1>\n      <input type=\"file\" onChange={handleImageChange} />\n      <button onClick={handleUpload}>Upload and Analyze</button>\n      {selectedImage && (\n          <div>\n              <h2>Image Preview:</h2>\n              <img src={selectedImage} alt=\"Preview\" style={{ maxWidth: '100%', maxHeight: '400px' }} />\n          </div>\n      )}\n  </div>\n);\n}\n\nexport default ImageUploadAndResult;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}